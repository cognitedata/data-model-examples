# Manifest file downloaded from fusion
externalId: tutorial-movie-actor-appearances
name: tutorial-Movie-actor-appearances
query: >-
  /* MAPPING_MODE_ENABLED: true */

  /* {"version":1,"sourceType":"raw","mappings":[{"from":"id","to":"externalId","asType":"STRING"},{"from":"movie","to":"startNode","asType":"STRUCT<STRING:STRING>"},{"from":"actor","to":"endNode","asType":"STRUCT<STRING:STRING>"}],"sourceLevel1":"{{cookiecutter.movie_actors_raw_db}}","sourceLevel2":"actor_movie_appearances"} */

  select
    cast(`id` as STRING) as externalId,
    node_reference('{{cookiecutter.movie_actors_space}}', movie) as startNode,
    node_reference('{{cookiecutter.movie_actors_space}}', actor) as endNode
  from
    `{{cookiecutter.movie_actors_raw_db}}`.`actor_movie_appearances`;
destination:
  instanceSpace: {{cookiecutter.movie_actors_space}}
  edgeType:
    space: {{cookiecutter.movie_actors_space}}
    externalId: Movie.actors
  type: edges
ignoreNullFields: true
shared: true
action: upsert
# Specify credentials separately like this:
# You can also use different credentials for the running transformations than the ones you use to deploy
authentication:
  clientId: ${TRANSFORMATIONS_CLIENT_ID}
  clientSecret: ${TRANSFORMATIONS_CLIENT_SECRET}
  tokenUrl: ${TRANSFORMATIONS_TOKEN_URL}
  # Optional: If idP requires providing the scopes
  cdfProjectName: ${TRANSFORMATIONS_PROJECT}
  scopes:
    - ${TRANSFORMATIONS_SCOPES}
  # Optional: If idP requires providing the audience
  audience: ${TRANSFORMATIONS_AUDIENCE}
