externalId: tutorial-load-workitems2assets
name: tutorial-load-workitems2assets
query: >-
  /* MAPPING_MODE_ENABLED: true */
  /* {"version":1,"sourceType":"raw","mappings":[
  {"from":"externalId","to":"externalId","asType":"STRING"},
  {"from":"sourceExternalId","to":"startNode","asType":"STRUCT<`space`:STRING, `externalId`:STRING>"},
  {"from":"targetExternalId","to":"endNode","asType":"STRUCT<`space`:STRING, `externalId`:STRING>"}],
  "sourceLevel1":"{{cookiecutter.apm_simple_raw_db}}","sourceLevel2":"workitem2assets"} */
  select
    cast(`externalId` as STRING) as externalId,
    node_reference('{{cookiecutter.apm_simple_space}}', `sourceExternalId`) as startNode,
    node_reference('{{cookiecutter.apm_simple_space}}', `targetExternalId`) as endNode
  from
    `{{cookiecutter.apm_simple_raw_db}}`.`workitem2assets`;
destination:
  dataModel:
    space: {{cookiecutter.apm_simple_space}}
    externalId: {{cookiecutter.apm_simple_datamodel}}
    version: "1"
    destinationType: WorkItem
    destinationRelationshipFromType: linkedAssets
  instanceSpace: {{cookiecutter.apm_simple_space}}
  type: instances
ignoreNullFields: true
shared: true
action: upsert
# Specify credentials separately like this:
# You can also use different credentials for the running transformations than the ones you use to deploy
authentication:
  clientId: ${TRANSFORMATIONS_CLIENT_ID}
  clientSecret: ${TRANSFORMATIONS_CLIENT_SECRET}
  tokenUrl: ${TRANSFORMATIONS_TOKEN_URL}
  # Optional: If idP requires providing the scopes
  cdfProjectName: ${TRANSFORMATIONS_PROJECT}
  scopes:
    - ${TRANSFORMATIONS_SCOPES}
  # Optional: If idP requires providing the audience
  audience: ${TRANSFORMATIONS_AUDIENCE}
